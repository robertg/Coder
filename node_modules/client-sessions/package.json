{
  "name": "client-sessions",
  "version": "0.3.1",
  "private": false,
  "description": "secure sessions stored in cookies",
  "main": "lib/client-sessions",
  "repository": {
    "type": "git",
    "url": "https://github.com/mozilla/node-client-sessions"
  },
  "dependencies": {
    "cookies": "0.2.1",
    "node-proxy": "0.6.0"
  },
  "devDependencies": {
    "vows": "0.5.13",
    "express": "2.5.0",
    "tobi": "https://github.com/Cowboy-coder/tobi/tarball/fd733a3",
    "zombie": "1.4.1"
  },
  "author": {
    "name": "Ben Adida",
    "email": "ben@adida.net"
  },
  "scripts": {
    "test": "vows --spec"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "readme": "[![build status](https://secure.travis-ci.org/mozilla/node-client-sessions.png)](http://travis-ci.org/mozilla/node-client-sessions)\n\nclient-sessions is connect middleware that implements sessions in encrypted tamper-free cookies.  For a complete introduction to encrypted client side sessions, refer to [Francois Marier's blog post on the subject][];\n\n[Francois Marier's blog post on the subject]: https://hacks.mozilla.org/2012/12/using-secure-client-side-sessions-to-build-simple-and-scalable-node-js-applications-a-node-js-holiday-season-part-3/\n\n**NOTE:** It is not recommended using both this middleware and connect's built-in session middleware.\n\n## Usage\n\nBasic usage:\n\n    var sessions = require(\"client-sessions\");\n    app.use(sessions({\n      cookieName: 'mySession', // cookie name dictates the key name added to the request object\n      secret: 'blargadeeblargblarg', // should be a large unguessable string\n      duration: 24 * 60 * 60 * 1000, // how long the session will stay valid in ms\n    }));\n\n    app.use(function(req, res, next) {\n      if (req.mySession.seenyou) {\n        res.setHeader('X-Seen-You', 'true');\n      } else {\n        // setting a property will automatically cause a Set-Cookie response\n        // to be sent\n        req.mySession.seenyou = true;\n        res.setHeader('X-Seen-You', 'false');\n      }\n    });\n\nYou can control more specific cookie behavior during setup:\n\n    app.use(sessions({\n      cookieName: 'mySession', // cookie name dictates the key name added to the request object\n      secret: 'blargadeeblargblarg', // should be a large unguessable string\n      duration: 24 * 60 * 60 * 1000, // how long the session will stay valid in ms\n      cookie: {\n        path: '/api', // cookie will only be sent to requests under '/api'\n        httpOnly: true, // when true, cookie is not accessible from javascript\n        secure: false   // when true, cookie will only be sent over SSL\n      }\n    }));\n\nFinally, you can have multiple cookies:\n\n    // a 1 week session\n    app.use(sessions({\n      cookieName: 'shopping_cart',\n      secret: 'first secret',\n      duration: 7 * 24 * 60 * 60 * 1000\n    }));\n\n    // a 2 hour encrypted session\n    app.use(sessions({\n      cookieName: 'authenticated',\n      secret: 'first secret',\n      duration: 2 * 60 * 60 * 1000\n    }));\n\nIn this example, there's a 2 hour authentication session, but shopping carts persist for a week.\n\n## License\n\n> This Source Code Form is subject to the terms of the Mozilla Public\n> License, v. 2.0. If a copy of the MPL was not distributed with this\n> file, You can obtain one at http://mozilla.org/MPL/2.0/.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mozilla/node-client-sessions/issues"
  },
  "_id": "client-sessions@0.3.1",
  "dist": {
    "shasum": "5df0d3222e3c73927a2e82bc9e977812b2f9efe2"
  },
  "_from": "client-sessions@0.3.1",
  "_resolved": "https://registry.npmjs.org/client-sessions/-/client-sessions-0.3.1.tgz"
}
